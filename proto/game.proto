/**
 * Game related messages.
 *
 * This file contains the messages that are used to communicate between the game server and the players.
 */
syntax = "proto3";

option go_package = "github.com/jonasdacruz/lighthouses_aicontest/coms";

/**
 * Represents a response for a new player that joined the game.
 */
message NewPlayer {
	string name = 1; // Name of the player
	string serverAddress = 2; // Address to reach the player
}

/**
 * Represents the game map as a list of rows.
 */
message MapRow {
	repeated int32 Row = 1; // Row of the map
}

/**
 * Represents a position in the game map.
 */
message Position {
	int32 X = 1; // X coordinate
	int32 Y = 2; // Y coordinate
}

/**
 * Represents a lighthouse in the game.
 */
message Lighthouse {
	Position Position = 1; // Position of the lighthouse
	int32 Owner = 2; // Owner of the lighthouse
	int32 Energy = 3; // Energy of the lighthouse
	repeated Position Connections = 4; // Connections of the lighthouse
	bool HaveKey = 5; // Have key to the lighthouse
}

/**
 * Represents a player ID.
 */
message PlayerID {
	int32 PlayerID = 1; // Player ID
}

/**
 * Represents the initial state of the game for a given player.
 */
message NewPlayerInitialState {
    int32 PlayerID = 1; // Player ID
    int32 PlayerCount = 2; // Number of players in the game
    Position Position = 3; // Initial position of the player
    repeated MapRow Map = 4; // Complete map of the game
    repeated Lighthouse Lighthouses = 5; // Lighthouses in the game
}

/**
 * Represents a new turn in the game for a given player.
 */
message NewTurn {
	Position Position = 1; // Current position of the player
	int32 Score = 2; // Current score of the player
	int32 Energy = 3; // Current energy of the player
	repeated MapRow View = 4; // Current view of the player surroundings
	repeated Lighthouse Lighthouses = 5; // Current state of the lighthouses
}

/**
 * Represents the actions that a player can take in a turn.
 */
enum Action {
    PASS = 0; // Do nothing
    MOVE = 1; // Move to a new position
    ATTACK = 2; // Attack a lighthouse
		CONNECT = 3; // Connect to a lighthouse
}

/**
 * Represents the action that a player took in a turn.
 */
message NewAction {
	Action Action = 1; // Action: 0 = pass, 1 = move, 2 = attack, 3 = connect
	Position Destination = 2; // Destination position for the action
	int32 Energy	= 3; // Energy used for the action
}

/**
 * Represents the player ready state.
 */
message PlayerReady {
	bool Ready = 1; // Ready state: 0 = not ready, 1 = ready
}

/**
 * Represents the game services.
 */
service GameService {
	rpc Join (NewPlayer) returns (PlayerID) {} // Service to join the game and get a player ID
	rpc InitialState (NewPlayerInitialState) returns (PlayerReady) {} // Service to get the initial state of the game for a given player
	rpc Turn (NewTurn) returns (NewAction) {} // Service to get the new turn of the game for a given player
}
